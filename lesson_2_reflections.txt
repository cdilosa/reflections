R8 - What happens when you initialize a repository? Why do you need it?
	 
	 I don't know. It didn't seem to work the same. It created the repository, but
	 there was no initial commit, and the only file in the directory was flagged as
	 not being tracked.
	 
R9 - How is the staging are different from the working directory and the repository?
	 What value do you think it offers?
	 
	 The staging area is where files that are going to be committed are held. It is
	 an intermediate area between the repository and the working directory. The staging
	 area allows you to "bundle" the files that you want to put in a single commit.

R10- How can you use the staging area to make sure you have one commit per logical change?
	 
	 You can run git diff --staged to make sure that the commit you are about to perform
	 contains one logical change between the staged version of the file(s) and the ones
	 in the previous commit.
	 
R11- What are some situations when branches would be helpful in keeping your history organized?
	 How would branches help?

	 If you want to make experimental changes to your file(s) but want to keep a working "master"
	 version intact, you could make these changes in separate branches.
	 
R12- How do the diagrams help you visualize the branch structure?
	 
	 A visual representation of the branches off of master make it easier to understand where all
	 the changes have been made, and which ones "overlap" and which ones were added separately.

R13- What os the resilt of merging two branches together? Why do we represent it in the diagram the
	 way we do?
	 
	 I don't know beause it didn't work.
	 
R14- What are the pros and cons of Git's automatic merging vs. always doing merges manually?

	 Automatic merging can make merges easier and faster, but cannot handle conflicts. Manual merges
	 take a lot more time and can be prone to mistakes, but conflicts are more likely to be resolved.
	 
	 

	 
								+------------+
								|            | 
	----------------------------|  Commands  |----------------------------
								|            | 
								+------------+

	 git init	// create git repository in current directory
	 ls -a		// show hidden files in directory
	 git status	// show the status of a directory
	 git add {file name} // Add the file from the working directory to the staging area
	 git commit {file name} // Commit the staged file(s)
	 git diff	// with no args, will show the difference between the working dir and staging area files
	 git diff --staged // will show the difference between the staged file(s) and those in the last commit
	 git checkout master // ??? something to do with HEADLESS state?
	 git reset --hard // get rid of any uncommitted changes. Use with caution!!!
	 git branch // see which branch you are currently working in
	 git branch {branch name} // will create a new branch with this name if it doesn't exist
	 git checkout {branch) // switch to this branch
	 git log --graph --oneline {first branch} {other branch} // Graphic visualization of branches
	 git log 	// list the commits
	 git merge {branch 1} {branch 2} // Merge branches
	 git merge --abort // SHUT IT DOWN
	 
	 When there is a conflict, look in the file, resolve the conflicts, stage the file, run
	 git status, then commit
	 